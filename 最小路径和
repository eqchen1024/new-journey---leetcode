'''
难度中等545收藏分享切换为英文关注反馈给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。

示例:

输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-path-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        dp=[[0]*len(grid[0])]*len(grid)#初始化
        def minsum(dp,grid):#循环填充
            for i in range(len(grid)):
                for j in range(len(grid[0])):
                    if i==0 and j==0:#初始位置
                        dp[0][0]=grid[0][0]
                    elif i==0 and j!=0:#因为只能向着右下方向填充，所以第0行的只能从左边取值与自身加和
                        dp[i][j]=dp[i][j-1]+grid[i][j]
                    elif i!=0 and j==0:#因为只能向着右下方向填充，所以第0列的只能从上边取值与自身加和
                        dp[i][j]=dp[i-1][j]+grid[i][j]
                    else:#非边缘 转移方程为 f(x[i][j])=min(f(x)[i-1][j],f(x)[i][j-1])+grid[i][j]
                        dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j]
            return dp[-1][-1]#输出
        return minsum(dp,grid)


        #通过滚动数组实现空间优化 不保存中间值
        dp=[float("inf")]*(len(grid[0])+1)#这里建立长度为n+1的列表是因为方便第一列和第一行的值判断
        #例如 dp[0]是正无穷则数组的第0列在min的作用下只能从上方取值加和，而第0行初始值为正无穷则在min的作用下从左边取值
        dp[1]=0 #数组的[0][0]号元素 0与正无穷比较后取0再加上grid[0][0]
        for row in grid:
            for k,v in enumerate(row):
                dp[k+1]=min(dp[k],dp[k+1])+v#比较左边的值s与上方的值（上方的值保存在dpp[k+1]位置未更新
        return dp[-1]
