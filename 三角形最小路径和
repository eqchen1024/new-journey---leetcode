'''
给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。

相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。

 

例如，给定三角形：

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]


自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/triangle
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        #每一层记忆最短路经及下标
        '''
        cost={}
        path=[]
        def recur(n,path,cost,triangle):
            #层数n
            if n==1:
                path.append(traingle[n][0])
                cost[n]=cost[n+1]+traingle[n][0]
                return
            else:   
        '''
        '''
        path=[]
        for i,li in enumerate(trangle):
            if i !=len(traingle):
                for j,item in enumerate(li):
                    traingle[i+1][j]+=traingle[i][j]
                    traingle[i+1][j+1]+=traingle[i][j]
            else:
                path.append(traingle[-1].index(min(traingle[-1]))
            '''
        '''
        n=len(triangle)
        f=[[0]*n for _ in range(n)]
        f[0][0]=triangle[0][0]
        for i in range(1,n):
            f[i][0]=f[i-1][0]+triangle[i][0]
            for j in range(1,i):
                f[i][j]=min(f[i-1][j-1],f[i-1][j])+triangle[i][j]
            f[i][i]=f[i-1][i-1]+triangle[i][i]
        return min(f[n-1])
        '''
        '''
        #空间节约
        n=len(triangle)
        f=[[0]*n for _ in range(2)]
        f[0][0]=triangle[0][0]
        for i in range(1,n):
            cur=i%2
            prev=1-i%2
            f[cur][0]=f[prev][0]+triangle[i][0]
            for j in range(1,i):
                f[cur][j]=min(f[prev][j-1],f[prev][j])+triangle[i][j]
            f[cur][i]=f[prev][i-1]+triangle[i][i]
        return min(f[(n-1)%2])
        '''
        #只使用一维数组存储
        n=len(triangle)
        f=[0]*n
        f[0]=triangle[0][0]
        for i in range(1,n):
            f[i]=f[i-1]+triangle[i][i]
            for j in range(i-1,0,-1):
                f[j]=min(f[j-1],f[j])+triangle[i][j]
            f[0]+=triangle[i][0]
        return min(f)
