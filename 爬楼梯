'''
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶

示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/climbing-stairs
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''



class Solution:
    def climbStairs(self, n: int) -> int:
        '''
        第i阶的走法等于前两天走法的和 因为i-2的每个方法一次跨两步j都可以得到i 第i-1阶多走一阶就是i阶
        dp=[0]*n
        if n==1:
            return 1
        elif n==2:
            return 2
        else:
            dp[0]=1
            dp[1]=2
            for i in range(2,n):
                dp[i]=dp[i-1]+dp[i-2]
            return dp[-1]
        '''
        '''
        空间优化

        '''
        if n==1:
            return 1
        elif n==2:
            return 2
        dp1=1
        dp2=2
        dp3=0
        for i in range(2,n):#注意序号下标2 对应的是三号元素
            dp3=dp1+dp2
            dp1=dp2
            dp2=dp3
        return dp3
