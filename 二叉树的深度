'''
输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。

例如：

给定二叉树 [3,9,20,null,null,15,7]，

    3
   / \
  9  20
    /  \
   15   7

返回它的最大深度 

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        '''
        #dfs 后序遍历 递归实现
        if root==None:
            return 0
        else:
            return max(self.maxDepth(root.left),self.maxDepth(root.right))+1
        '''
        #bfs 层序遍历 通过队列实现层序遍历
        queue=[root]
        res=0
        while queue:
            tmp=[]
            if root ==None:
                return 0
            else:
                for i in queue:
                    if i.left:
                        tmp.append(i.left)
                    if i.right:
                        tmp.append(i.right)
            res+=1
            queue=tmp 
        return res
